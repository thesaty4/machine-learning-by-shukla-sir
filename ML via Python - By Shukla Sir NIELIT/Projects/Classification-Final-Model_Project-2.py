{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter your name >> satya mishra\n",
      "Youre Gender is male/female >> male\n",
      "Are you married yes/no ? no\n",
      "Are you Dependents yes=1/no=0 ? 1\n",
      "Education Graduate/Not Graduate >> graduate\n",
      "Are you self employee Yes/No ? no\n",
      "What your Applicant Income Under (150 - 81000) ? 200\n",
      "What your Co-Applicant-Income under (0.0 - 20000.0) ? 100\n",
      "Loan Amount under (17.0 - 700.0) ? 20\n",
      "Loan Amount Term under (12.0 - 480) >> 25\n",
      "Credit History 0/1 ? 0\n",
      "Property Area (Semiurban/Urban/Rural) ? semiurban\n",
      "Congratulation  Satya Mishra ! Your loan has been approved \n"
     ]
    }
   ],
   "source": [
    "# Classification problem\n",
    "import pandas as pd\n",
    "data=pd.read_csv(\"train.csv\")\n",
    "data['Gender'].fillna('Male',inplace=True)\n",
    "data['Married'].fillna(\"Yes\",inplace=True)\n",
    "data['Dependents'].fillna(0,inplace=True)\n",
    "data['Self_Employed'].fillna('No',inplace=True)\n",
    "data['LoanAmount'].fillna(data['LoanAmount'].mean(),inplace=True)\n",
    "data['Loan_Amount_Term'].fillna(data['Loan_Amount_Term'].mean(),inplace=True)\n",
    "data['Credit_History'].fillna(1.0,inplace=True)\n",
    "\n",
    "feature=data.drop(['Loan_ID','Loan_Status'],axis=1)\n",
    "outcome=data['Loan_Status']\n",
    "feature=pd.get_dummies(feature)\n",
    "\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "scale=MinMaxScaler(feature_range=(0,1))\n",
    "feature[feature.columns]=scale.fit_transform(feature[feature.columns])\n",
    "from sklearn.model_selection import train_test_split\n",
    "feature_train,feature_test,outcome_train,outcome_test=train_test_split(feature,outcome,test_size=0.30)\n",
    "\n",
    "# Algorithem\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "\n",
    "lr_model=LogisticRegression()\n",
    "svc_model=SVC()\n",
    "tree_model=DecisionTreeClassifier()\n",
    "GNB_model=GaussianNB()\n",
    "KNC_model=KNeighborsClassifier()\n",
    "\n",
    "lr_model.fit(feature_train,outcome_train)\n",
    "svc_model.fit(feature_train,outcome_train)\n",
    "tree_model.fit(feature_train,outcome_train)\n",
    "GNB_model.fit(feature_train,outcome_train)\n",
    "KNC_model.fit(feature_train,outcome_train)\n",
    "\n",
    "# Testing the model---------------------------\n",
    "# lr_predict=lr_model.predict(feature_test)\n",
    "# svc_predict=svc_model.predict(feature_test)\n",
    "# tree_predict=tree_model.predict(feature_test)\n",
    "# GNB_predict=GNB_model.predict(feature_test)\n",
    "# KNC_predict=KNC_model.predict(feature_test)\n",
    "\n",
    "# lr=lr_model.score(feature_test,outcome_test)\n",
    "# svc=svc_model.score(feature_test,outcome_test)\n",
    "# tree=tree_model.score(feature_test,outcome_test)\n",
    "# gnb=GNB_model.score(feature_test,outcome_test)\n",
    "# knc=KNC_model.score(feature_test,outcome_test)\n",
    "# print(lr*100 ,\"\\n\",svc*100,\"\\n\", tree*100 ,\"\\n\", gnb*100 ,\"\\n\", knc*100)\n",
    "# Support Vector Machine is best Algorithem for in this case\n",
    "# Testing the model -----------------------------------\n",
    "\n",
    "# Implementing model------------------------------------------------\n",
    "name=input(\"Enter your name >> \").title()\n",
    "gender=input(\"Youre Gender is male/female >> \").title()\n",
    "married=input(\"Are you married yes/no ? \").title()\n",
    "dependents=int(input(\"Are you Dependents yes=1/no=0 ? \"))\n",
    "education=input(\"Education Graduate/Not Graduate >> \").title()\n",
    "self_emp=input(\"Are you self employee Yes/No ? \").title()\n",
    "applicantIncome=int(input(\"What your Applicant Income Under (150 - 81000) ? \"))\n",
    "coapplicantIncome=float(input(\"What your Co-Applicant-Income under (0.0 - 20000.0) ? \"))\n",
    "loanAmount=float(input(\"Loan Amount under (17.0 - 700.0) ? \"))\n",
    "l_a_t=float(input(\"Loan Amount Term under (12.0 - 480) >> \"))\n",
    "credit_history=float(input(\"Credit History 0/1 ? \"))\n",
    "property_area=input(\"Property Area (Semiurban/Urban/Rural) ? \").title()\n",
    "\n",
    "data_set=(gender,married,dependents,education,self_emp,applicantIncome,coapplicantIncome,loanAmount,l_a_t,credit_history,property_area)\n",
    "col=data.columns\n",
    "col=col.drop(['Loan_ID','Loan_Status'])\n",
    "newDf=pd.DataFrame([data_set],columns=col)\n",
    "\n",
    "newDf=pd.get_dummies(newDf)\n",
    "\n",
    "# Find missing columns and fill as Zero 0\n",
    "miss_col=set(feature.columns)-set(newDf.columns)\n",
    "for i in miss_col:\n",
    "    newDf[i]=0\n",
    "    \n",
    "# Predict ----------------------------\n",
    "predict=svc_model.predict(newDf)\n",
    "\n",
    "# ---------------------Result / Outcome\n",
    "if(predict[0]=='Y'):\n",
    "    print(\"\\nCongratulation \",name ,\"! Your loan has been approved \")\n",
    "else:\n",
    "    print(\"\\nSorry \",name,\"! Your loan is not approved ...\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
